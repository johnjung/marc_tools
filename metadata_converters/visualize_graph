#!/usr/bin/env python
"""Usage:
    visualize_graph (--dot|--gephi) (--all|--cho)
"""

import csv, rdflib, re, sys
from rdflib import Graph, Namespace
from rdflib.namespace import RDF
from docopt import docopt

EDM = Namespace('http://www.europeana.eu/schemas/edm/')

def unique_nodes_from_sparql(r):
    '''Return a unique list of nodes from a SPARQL query. 

    Params:
        r -- the result of a SPARQL query.
    '''
    return sorted(list(set([item for row in r for item in row])))

def shorten_references_to_local_filesystem(nodes):
    '''Remove local filesystem references before 'repository'.

    Params:
        nodes -- a list of nodes.
    '''
    for n in range(len(nodes)):
        if str(nodes[n]).startswith('file:///'):
            nodes[n] = re.sub('^.*(?=repository)', 'file:///', str(nodes[n]))
        else:
            nodes[n] = str(nodes[n])
    return nodes

def create_matrix(nodes):
    '''Build a matrix for gephi.
    '''
    matrix = [[''] + nodes]
    for n in range(len(nodes)):
       matrix.append([nodes[n]] + [0 for i in range(len(nodes))])
    return matrix

def set_edges(matrix, r):
    '''Set the edges in a matrix, where nodes are listed along the top and left
       edge. Edges are represented by 1, no edge is a 0.
    '''
    for row in r:
        i = nodes_orig.index(row[0])
        j = nodes_orig.index(row[1])
        matrix[j + 1][i + 1] = 1
    return matrix

if __name__=="__main__":
    options = docopt(__doc__)

    g = Graph()
    g.parse(sys.stdin, format='n3')

    if options['--all']:
        r = g.query(
            '''SELECT ?s
               WHERE { ?s rdf:type ?o . 
               FILTER ( ?o IN ( edm:ProvidedCHO,
                                edm:WebResource,
                                ore:Aggregation,
                                ore:Proxy,
                                ore:ResourceMap )) }''')

        nodes = unique_nodes_from_sparql(r)
        nodes_orig = nodes.copy()
        nodes = shorten_references_to_local_filesystem(nodes)

        if options['--gephi']: 
            matrix = create_matrix(nodes)
            r = g.query(
                '''SELECT ?s ?o
                   WHERE { ?s dcterms:hasPart ?o .
                           ?s rdf:type edm:ProvidedCHO .
                           ?o rdf:type edm:ProvidedCHO . }''')
            matrix = set_edges(matrix, r)

            r = g.query(
                '''SELECT ?s ?o
                   WHERE { ?s dcterms:isPartOf ?o .
                           ?s rdf:type edm:ProvidedCHO .
                           ?o rdf:type edm:ProvidedCHO . }''')
            matrix = set_edges(matrix, r)

            r = g.query(
                '''SELECT ?s ?o
                   WHERE { ?s ore:ProxyFor ?o .
                           ?s rdf:type ore:Proxy .
                           ?o rdf:type edm:ProvidedCHO . }''')
            matrix = set_edges(matrix, r)

            r = g.query(
                '''SELECT ?s ?o
                   WHERE { ?s ore:ProxyIn ?o .
                           ?s rdf:type ore:Proxy .
                           ?o rdf:type ore:Aggregation . }''')
            matrix = set_edges(matrix, r)

            r = g.query(
                '''SELECT ?s ?o
                   WHERE { ?s ore:describes ?o .
                           ?s rdf:type ore:ResourceMap .
                           ?o rdf:type ore:Aggregation . }''')
            matrix = set_edges(matrix, r)

            r = g.query(
                '''SELECT ?s ?o
                   WHERE { ?s ore:isDescribedBy ?o .
                           ?s rdf:type ore:Aggregation .
                           ?o rdf:type edm:ProvidedCHO . }''')
            matrix = set_edges(matrix, r)

            r = g.query(
                '''SELECT ?s ?o
                   WHERE { ?s edm:aggregatedCHO ?o .
                           ?s rdf:type ore:Aggregation .
                           ?o rdf:type edm:ProvidedCHO . }''')
            matrix = set_edges(matrix, r)

            r = g.query(
                '''SELECT ?s ?o
                   WHERE { ?s ore:isDescribedBy ?o .
                           ?s rdf:type ore:Aggregation .
                           ?o rdf:type ore:ResourceMap . }''')
            matrix = set_edges(matrix, r)

            r = g.query(
                '''SELECT ?s ?o
                   WHERE { ?s ore:isShownBy ?o .
                           ?s rdf:type ore:Aggregation .
                           ?o rdf:type edm:WebResource . }''')
            matrix = set_edges(matrix, r)
            
            # write CSV to standard out.
            w = csv.writer(sys.stdout)
            for o in out:
                w.writerow(o)

        sys.exit()

    elif options['--cho']:
        r = g.query(
            '''SELECT ?s ?o
               WHERE { ?s dcterms:hasPart|dcterms:isPartOf ?o . }''')
        
        nodes = unique_nodes_from_sparql(r)
        nodes_orig = nodes.copy()
        nodes = shorten_references_to_local_filesystem(nodes)
   
        if options['--gephi']: 
            # output a csv matrix for gephi.
            out = [[''] + nodes]
            for n in range(len(nodes)):
                out.append([nodes[n]] + [0 for i in range(len(nodes))])
            
            # define edges by setting the appropriate matrix cell to 1.
            for row in r:
                i = nodes_orig.index(row[0])
                j = nodes_orig.index(row[1])
                out[j + 1][i + 1] = 1
                out[i + 1][j + 1] = 1
            
            # write CSV to standard out.
            w = csv.writer(sys.stdout)
            for o in out:
                w.writerow(o)
    
        elif options['--dot']:
            # output a dot file for graphviz.
            sys.stdout.write('graph G {\n')
            for i, node in enumerate(nodes):
                sys.stdout.write('    N{} [label="{}"]\n'.format(i, node))
            for row in r:
                i = nodes_orig.index(row[0])
                j = nodes_orig.index(row[1])
                sys.stdout.write('    N{} -- N{};\n'.format(i, j))
            sys.stdout.write('}\n')
